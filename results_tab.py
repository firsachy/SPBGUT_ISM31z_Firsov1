import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
from datetime import datetime, timedelta

class ResultsTab:
    def __init__(self, parent_frame, database):
        self.frame = parent_frame
        self.db = database
        self.setup_ui()
        self.refresh_data()

        self.auto_refresh()

    def auto_refresh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.refresh_data()
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self.frame.after(5000, self.auto_refresh)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            # –ù–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_container = tk.Frame(self.frame)
        main_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(main_container, text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏—Å—Ç–µ–º—ã", 
                        font=("Arial", 16, "bold"), pady=10)
        title.pack()

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = tk.Button(main_container, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                               command=self.refresh_data,
                               font=("Arial", 10))
        refresh_btn.pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        self.setup_metrics_section(main_container)
        
        # –§—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.setup_charts_section(main_container)
        
        # –§—Ä–µ–π–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.setup_detailed_stats_section(main_container)

    def setup_metrics_section(self, parent):
        """–°–µ–∫—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        metrics_frame = tk.LabelFrame(parent, text="–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã", 
                                    font=("Arial", 12, "bold"), pady=10, padx=10)
        metrics_frame.pack(fill='x', pady=10)
        
        # –°–µ—Ç–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        metrics_grid = tk.Frame(metrics_frame)
        metrics_grid.pack(fill='x')
        
        # –ú–µ—Ç—Ä–∏–∫–∞ 1: –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        self.accuracy_label = self.create_metric_card(metrics_grid, "–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", "0%", 0)
        
        # –ú–µ—Ç—Ä–∏–∫–∞ 2: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–∏—Ñ—Ä
        self.processed_label = self.create_metric_card(metrics_grid, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–∏—Ñ—Ä", "0", 1)
        
        # –ú–µ—Ç—Ä–∏–∫–∞ 3: –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        self.clusters_label = self.create_metric_card(metrics_grid, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", "0", 2)
        
        # –ú–µ—Ç—Ä–∏–∫–∞ 4: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–¥–±–µ–∫–∞
        self.feedback_label = self.create_metric_card(metrics_grid, "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–¥–±–µ–∫–∞", "0%", 3)

    def create_metric_card(self, parent, title, value, column):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –º–µ—Ç—Ä–∏–∫–æ–π"""
        card = tk.Frame(parent, relief='solid', bd=1, padx=10, pady=10)
        card.grid(row=0, column=column, padx=5, sticky='ew')
        
        title_label = tk.Label(card, text=title, font=("Arial", 9), fg="gray")
        title_label.pack()
        
        value_label = tk.Label(card, text=value, font=("Arial", 14, "bold"))
        value_label.pack()
        
        return value_label

    def setup_charts_section(self, parent):
        """–°–µ–∫—Ü–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        charts_frame = tk.LabelFrame(parent, text="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", 
                                   font=("Arial", 12, "bold"), pady=10, padx=10)
        charts_frame.pack(fill='x', pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –¥–≤—É—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts_container = tk.Frame(charts_frame)
        charts_container.pack(fill='x')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        self.setup_feedback_chart(charts_container)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ü–∏—Ñ—Ä–∞–º
        self.setup_accuracy_chart(charts_container)

    def setup_feedback_chart(self, parent):
        """–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–æ–≤"""
        chart_frame = tk.Frame(parent)
        chart_frame.pack(side='left', padx=5, fill='x', expand=True)
        
        chart_title = tk.Label(chart_frame, text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", 
                              font=("Arial", 10, "bold"))
        chart_title.pack()
        
        self.feedback_fig, self.feedback_ax = plt.subplots(figsize=(5, 3))
        self.feedback_canvas = FigureCanvasTkAgg(self.feedback_fig, chart_frame)
        self.feedback_canvas.get_tk_widget().pack(fill='x')

    def setup_accuracy_chart(self, parent):
        """–ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ü–∏—Ñ—Ä–∞–º"""
        chart_frame = tk.Frame(parent)
        chart_frame.pack(side='left', padx=5, fill='x', expand=True)
        
        chart_title = tk.Label(chart_frame, text="–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ü–∏—Ñ—Ä–∞–º", 
                              font=("Arial", 10, "bold"))
        chart_title.pack()
        
        self.accuracy_fig, self.accuracy_ax = plt.subplots(figsize=(5, 3))
        self.accuracy_canvas = FigureCanvasTkAgg(self.accuracy_fig, chart_frame)
        self.accuracy_canvas.get_tk_widget().pack(fill='x')

    def setup_detailed_stats_section(self, parent):
        """–°–µ–∫—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats_frame = tk.LabelFrame(parent, text="–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                                  font=("Arial", 12, "bold"), pady=10, padx=10)
        stats_frame.pack(fill='x', pady=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        columns = ('metric', 'value')
        self.stats_tree = ttk.Treeview(stats_frame, columns=columns, show='headings', height=8)
        self.stats_tree.heading('metric', text='–ú–µ—Ç—Ä–∏–∫–∞')
        self.stats_tree.heading('value', text='–ó–Ω–∞—á–µ–Ω–∏–µ')
        self.stats_tree.column('metric', width=250)
        self.stats_tree.column('value', width=150)
        self.stats_tree.pack(fill='x')

    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ"""
        try:
            print("üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            stats = self.calculate_statistics()
            print(f"üîç DEBUG: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats.keys()}")
            self.update_metrics(stats)
            self.update_charts(stats)
            self.update_detailed_stats(stats)
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            import traceback
            traceback.print_exc()  # ‚≠ê‚≠ê –î–û–ë–ê–í–ò–ú –ü–û–î–†–û–ë–ù–´–ô –¢–†–ï–ô–°–ë–≠–ö

    def calculate_statistics(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        try:
            cursor = self.db.conn.cursor()
        
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã statistics
            latest_stats = self.db.get_latest_statistics()
        
            if latest_stats:
                print(f"üîç DEBUG: latest_stats = {latest_stats}")
                # ‚≠ê‚≠ê –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –ë–ê–ô–¢–´ –í –ß–ò–°–õ–ê –ï–°–õ–ò –ù–£–ñ–ù–û
                def safe_convert(value):
                    if isinstance(value, bytes):
                        return int.from_bytes(value, byteorder='little')
                    return value
            
                stats = {
                    'total_samples': safe_convert(latest_stats[2]),
                    'correct_predictions': safe_convert(latest_stats[3]),
                    'overall_accuracy': safe_convert(latest_stats[4]),
                    'total_clusters': safe_convert(latest_stats[5]),
                    'feedback_stats': {
                        'yes': safe_convert(latest_stats[6]),
                        'no': safe_convert(latest_stats[7]),
                        'unsure': safe_convert(latest_stats[8]),
                        'verified': safe_convert(latest_stats[9])
                    }
                }
            else:
                print("üîç DEBUG: –ù–µ—Ç saved statistics, –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä—É—á–Ω—É—é")
                # Fallback: –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
                cursor.execute("SELECT COUNT(*) FROM samples")
                total_samples = cursor.fetchone()[0]
            
                cursor.execute("SELECT COUNT(*) FROM samples WHERE user_feedback = 'yes'")
                correct_predictions = cursor.fetchone()[0]
            
                cursor.execute("SELECT COUNT(*) FROM clusters")
                total_clusters = cursor.fetchone()[0]
            
                cursor.execute('SELECT user_feedback, COUNT(*) FROM samples GROUP BY user_feedback')
                feedback_results = cursor.fetchall()
                feedback_stats = {}
                for feedback, count in feedback_results:
                    # ‚≠ê‚≠ê –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –ë–ê–ô–¢–´ –ï–°–õ–ò –ù–£–ñ–ù–û
                    if isinstance(feedback, bytes):
                        feedback = feedback.decode('utf-8')
                    if isinstance(count, bytes):
                        count = int.from_bytes(count, byteorder='little')
                    feedback_stats[feedback] = count
            
                stats = {
                    'total_samples': total_samples,
                    'correct_predictions': correct_predictions,
                    'total_clusters': total_clusters,
                    'feedback_stats': feedback_stats,
                    'overall_accuracy': correct_predictions / total_samples if total_samples > 0 else 0
                }
        
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ü–∏—Ñ—Ä–∞–º
            cursor.execute('''
                SELECT predicted_label, true_label, verified_label 
                FROM samples 
                WHERE verified_label IS NOT NULL AND true_label IS NOT NULL
            ''')
            accuracy_data = cursor.fetchall()
        
            digit_accuracy = {i: {'correct': 0, 'total': 0} for i in range(10)}
            for row in accuracy_data:
                pred, true, verified = row
            
                # ‚≠ê‚≠ê –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –ë–ê–ô–¢–´ –ï–°–õ–ò –ù–£–ñ–ù–û
                if isinstance(true, bytes):
                    true = int.from_bytes(true, byteorder='little')
                if isinstance(verified, bytes):
                    verified = int.from_bytes(verified, byteorder='little')
            
                digit_accuracy[true]['total'] += 1
                if verified == true:
                    digit_accuracy[true]['correct'] += 1
        
            stats['digit_accuracy'] = digit_accuracy
            return stats
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return self.get_fallback_stats()

    def update_metrics(self, stats):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        self.accuracy_label.config(text=f"{stats['overall_accuracy']:.1%}")
        self.processed_label.config(text=f"{stats['total_samples']}")
        self.clusters_label.config(text=f"{stats['total_clusters']}")
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–¥–±–µ–∫–∞ = (correct + verified) / total
        feedback_eff = (stats['correct_predictions'] + 
                       stats['feedback_stats'].get('verified', 0)) / stats['total_samples']
        self.feedback_label.config(text=f"{feedback_eff:.1%}")

    def update_charts(self, stats):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏"""
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–æ–≤
        self.feedback_ax.clear()
        feedback_types = ['yes', 'no', 'unsure', 'verified']
        feedback_counts = [stats['feedback_stats'].get(fb, 0) for fb in feedback_types]
        feedback_labels = ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç', '‚è∞ –ù–µ –∑–Ω–∞—é', 'üéØ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è']
        
        bars = self.feedback_ax.bar(feedback_labels, feedback_counts, color=['green', 'red', 'orange', 'blue'])
        self.feedback_ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        self.feedback_ax.tick_params(axis='x', rotation=45)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        for bar, count in zip(bars, feedback_counts):
            height = bar.get_height()
            self.feedback_ax.text(bar.get_x() + bar.get_width()/2., height,
                                f'{count}', ha='center', va='bottom')
        
        self.feedback_fig.tight_layout()
        self.feedback_canvas.draw()
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ —Ü–∏—Ñ—Ä–∞–º
        self.accuracy_ax.clear()
        digits = list(range(10))
        accuracies = []
        
        for digit in digits:
            data = stats['digit_accuracy'][digit]
            accuracy = data['correct'] / data['total'] if data['total'] > 0 else 0
            accuracies.append(accuracy)
        
        bars = self.accuracy_ax.bar(digits, accuracies, color='skyblue')
        self.accuracy_ax.set_title('–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ü–∏—Ñ—Ä–∞–º')
        self.accuracy_ax.set_xlabel('–¶–∏—Ñ—Ä–∞')
        self.accuracy_ax.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å')
        self.accuracy_ax.set_ylim(0, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        for bar, acc in zip(bars, accuracies):
            height = bar.get_height()
            self.accuracy_ax.text(bar.get_x() + bar.get_width()/2., height,
                                f'{acc:.1%}', ha='center', va='bottom')
        
        self.accuracy_fig.tight_layout()
        self.accuracy_canvas.draw()

    def update_detailed_stats(self, stats):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.stats_tree.get_children():
            self.stats_tree.delete(item)
        
        detailed_stats = [
            ("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–∏—Ñ—Ä", f"{stats['total_samples']}"),
            ("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", f"{stats['correct_predictions']}"),
            ("–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", f"{stats['overall_accuracy']:.1%}"),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", f"{stats['total_clusters']}"),
            ("–û—Ç–≤–µ—Ç–æ–≤ '–î–∞'", f"{stats['feedback_stats'].get('yes', 0)}"),
            ("–û—Ç–≤–µ—Ç–æ–≤ '–ù–µ—Ç'", f"{stats['feedback_stats'].get('no', 0)}"), 
            ("–û—Ç–≤–µ—Ç–æ–≤ '–ù–µ –∑–Ω–∞—é'", f"{stats['feedback_stats'].get('unsure', 0)}"),
            ("–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ", f"{stats['feedback_stats'].get('verified', 0)}"),
            ("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–∏–¥–±–µ–∫–∞", f"{(stats['correct_predictions'] / stats['total_samples']):.1%}"),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ü–∏—Ñ—Ä–∞–º
        for digit in range(10):
            data = stats['digit_accuracy'][digit]
            if data['total'] > 0:
                accuracy = data['correct'] / data['total']
                detailed_stats.append((f"–¢–æ—á–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä—ã {digit}", f"{accuracy:.1%}"))
        
        for metric, value in detailed_stats:
            self.stats_tree.insert('', 'end', values=(metric, value))

    def get_fallback_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return {
            'total_samples': 0,
            'correct_predictions': 0,
            'overall_accuracy': 0,
            'total_clusters': 0,
            'feedback_stats': {'yes': 0, 'no': 0, 'unsure': 0, 'verified': 0},
            'digit_accuracy': {i: {'correct': 0, 'total': 0} for i in range(10)}
        }