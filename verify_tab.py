import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageTk
import io
import pickle

class VerifyTab:
    def __init__(self, parent_frame, database, ml_core):
        self.frame = parent_frame
        self.db = database
        self.ml_core = ml_core
        self.current_sample = None
        self.pending_samples = []
        
        self.setup_ui()
        self.load_pending_samples()
        self.show_next_sample()
        
        # ‚≠ê‚≠ê –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–ö–¢–ò–í–ê–¶–ò–ò –í–ö–õ–ê–î–ö–ò ‚≠ê‚≠ê
        self._bind_tab_events()

    def _bind_tab_events(self):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π notebook
        parent = self.frame.winfo_parent()
        if parent:
            notebook = self.frame.nametowidget(parent)
            if isinstance(notebook, ttk.Notebook):
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–≥–¥–∞ —ç—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
                notebook.bind("<<NotebookTabChanged>>", self._on_tab_changed)
    
    def _on_tab_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏"""
        try:
            notebook = event.widget
            current_tab = notebook.select()
            if current_tab == str(self.frame):
                print("üîÅ –ê–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ VerifyTab - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
                self.refresh_verification_list()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏: {e}")

    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.frame)
        main_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(main_container, text="–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á–∏—Å–µ–ª", 
                        font=("Arial", 16, "bold"), pady=10)
        title.pack()

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        image_container = tk.Frame(main_container, bg="white", relief="solid", bd=2)
        image_container.pack(pady=20)
        
        self.image_label = tk.Label(image_container, bg="white", width=300, height=300)
        self.image_label.pack(padx=10, pady=10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        self.prediction_label = tk.Label(main_container, text="", 
                                        font=("Arial", 12), pady=5)
        self.prediction_label.pack()

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = tk.Label(main_container, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É:",
                              font=("Arial", 11), fg="gray")
        instruction.pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ü–∏—Ñ—Ä
        digits_container = tk.Frame(main_container)
        digits_container.pack(pady=15)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ü–∏—Ñ—Ä 0-9 –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
        self.digit_buttons = []
        for i in range(10):
            btn = tk.Button(digits_container, text=str(i), width=6, height=2,
                          font=("Arial", 14, "bold"),
                          bg="#f0f0f0", activebackground="#e0e0e0",
                          command=lambda digit=i: self.on_digit_selected(digit))
            
            if i < 5:
                btn.grid(row=0, column=i, padx=3, pady=3)
            else:
                btn.grid(row=1, column=i-5, padx=3, pady=3)
                
            self.digit_buttons.append(btn)

        # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.status_label = tk.Label(main_container, text="", 
                                    font=("Arial", 11), pady=10)
        self.status_label.pack()

        # –°—á–µ—Ç—á–∏–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        control_frame = tk.Frame(main_container)
        control_frame.pack(pady=10)

        self.counter_label = tk.Label(control_frame, text="", 
                                     font=("Arial", 10))
        self.counter_label.pack(side=tk.LEFT, padx=10)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = tk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                                   command=self.refresh_verification_list,
                                   font=("Arial", 9))
        self.refresh_btn.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
        self.debug_btn = tk.Button(control_frame, text="üêõ –û—Ç–ª–∞–¥–∫–∞", 
                                 command=self.debug_info,
                                 font=("Arial", 9), bg="#ffeb3b")
        self.debug_btn.pack(side=tk.LEFT, padx=5)
        
        # ‚≠ê‚≠ê –ö–ù–û–ü–ö–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø ‚≠ê‚≠ê
        self.force_refresh_btn = tk.Button(control_frame, text="üí• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                                         command=self.force_refresh,
                                         font=("Arial", 9), bg="#4CAF50", fg="white")
        self.force_refresh_btn.pack(side=tk.LEFT, padx=5)

    def force_refresh(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print("üí• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï...")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_pending_samples()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.show_next_sample()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.frame.update_idletasks()

    def load_pending_samples(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        try:
            cursor = self.db.conn.cursor()
            
            
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            cursor.execute('''
                SELECT sample_id, image_data, predicted_label, user_feedback, cluster_id, true_label
                FROM samples 
                WHERE verified_label IS NULL 
                AND user_feedback IN ('no', 'unsure')
                ORDER BY sample_id
                ''')
            
            results = cursor.fetchall()
            self.pending_samples = []
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(results)} –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            for row in results:
                sample_id, image_blob, predicted_label, user_feedback, cluster_id, true_label = row
                
                if image_blob is None:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º sample_id {sample_id}: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    continue
                    
                try:
                    image_data = pickle.loads(image_blob)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if isinstance(image_data, list):
                        image_array = np.array(image_data, dtype=np.float32)
                    else:
                        image_array = image_data
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if image_array.max() > 1.0:
                        image_array = image_array / 255.0

                    # ‚≠ê‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ï–û–ë–†–ê–ó–£–ï–ú TRUE_LABEL –í INT ‚≠ê‚≠ê
                    if isinstance(true_label, bytes):
                        true_label = int.from_bytes(true_label, byteorder='little')
                    elif true_label is not None:
                        true_label = int(true_label)
                    
                    self.pending_samples.append({
                        'sample_id': sample_id,
                        'image_data': image_array,
                        'predicted_label': predicted_label,
                        'user_feedback': user_feedback,
                        'cluster_id': cluster_id,
                        'true_label': true_label
                    })
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ sample_id {sample_id}: {e}")
                    continue
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: {e}")
            self.pending_samples = []

    def array_to_image(self, digit_array):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy array –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è tkinter"""
        try:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —ç—Ç–æ 2D array
            if len(digit_array.shape) == 1:
                side = int(np.sqrt(digit_array.shape[0]))
                digit_array = digit_array.reshape(side, side)
            
            # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if digit_array.max() <= 1.0:
                display_array = (digit_array * 255).astype(np.uint8)
            else:
                display_array = digit_array.astype(np.uint8)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            plt.figure(figsize=(4, 4))
            plt.imshow(display_array, cmap='gray')
            plt.axis('off')
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight', 
                       pad_inches=0, dpi=70)
            buf.seek(0)
            plt.close()
            
            return Image.open(buf)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return Image.new('RGB', (200, 200), color='lightgray')

    def show_next_sample(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_sample = None
        
        if not self.pending_samples:
            self.show_no_samples()
            return
        
        # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä
        self.current_sample = self.pending_samples.pop(0)
        
        print(f"üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º sample_id {self.current_sample['sample_id']}")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = self.array_to_image(self.current_sample['image_data'])
            photo = ImageTk.PhotoImage(image)
            
            self.image_label.configure(image=photo)
            self.image_label.image = photo
            
            # ‚≠ê‚≠ê –†–ê–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –¢–ò–ü–ê –§–ò–î–ë–ï–ö–ê ‚≠ê‚≠ê
            if self.current_sample['user_feedback'] == 'no':
                # –î–ª—è "–ù–µ—Ç" - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                feedback_icon = "‚ùå"
                feedback_text = "–í—ã –æ—Ç–≤–µ—Ä–≥–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
                prediction_text = f"{feedback_icon} –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª–∞: {self.current_sample['predicted_label']}"
                instruction_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É:"
            else:
                # –î–ª—è "–ù–µ –∑–Ω–∞—é" - –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢ 
                feedback_icon = "‚è∞"
                feedback_text = "–í—ã –Ω–µ –±—ã–ª–∏ —É–≤–µ—Ä–µ–Ω—ã"
                prediction_text = f"{feedback_icon} –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª–∞: {self.current_sample['predicted_label']} | –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {self.current_sample['true_label']}"
                instruction_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É:"
            self.prediction_label.config(
                text=prediction_text,
                fg="red" if self.current_sample['user_feedback'] == 'no' else "orange"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É", fg="black")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ —Ñ–∏–¥–±–µ–∫–∞
            info_text = tk.Label(self.frame, text=feedback_text, font=("Arial", 10), fg="gray")
            info_text.pack(pady=2)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if hasattr(self, '_info_label'):
                self._info_label.destroy()
            self._info_label = info_text

            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            for btn in self.digit_buttons:
                btn.config(state="normal", bg="#f0f0f0")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            remaining = len(self.pending_samples)
            self.counter_label.config(text=f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} —á–∏—Å–µ–ª")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.status_label.config(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", fg="red")
            self.frame.after(1000, self.show_next_sample)

    def show_no_samples(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤"""
        self.image_label.configure(image='')
        self.image_label.config(text="üì≠ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", bg="lightgray", fg="black")
        self.prediction_label.config(text="")
        self.status_label.config(text="üéâ –ù–µ—Ç —á–∏—Å–µ–ª –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!", fg="green")
        self.counter_label.config(text="–í—Å–µ —á–∏—Å–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–º–∏
        for btn in self.digit_buttons:
            btn.config(state="disabled", bg="#d0d0d0")

    def on_digit_selected(self, true_digit):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–∏—Ñ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        if not self.current_sample:
            return
        
        sample_id = self.current_sample['sample_id']
        predicted_digit = self.current_sample['predicted_label']
        cluster_id = self.current_sample['cluster_id']
        
        print(f"üéØ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: sample_id {sample_id} -> —Ü–∏—Ñ—Ä–∞ {true_digit} (–±—ã–ª–æ: {predicted_digit})")
        
        try:
            # ‚≠ê‚≠ê –û–ë–ù–û–í–õ–Ø–ï–ú –í–ï–°–ê –ö–õ–ê–°–¢–ï–†–ê ‚≠ê‚≠ê
            if self.ml_core and self.ml_core.is_trained and cluster_id != -1:
                config = self.db.load_system_config()
                if config and 'weights' in config:
                    alpha = config['weights'].get('alpha', 0.2)
                    beta = config['weights'].get('beta', 0.5)
                    gamma = config['weights'].get('gamma', 0.5)
                    min_weight = config['weights'].get('min_weight', 0.05) 
                else:
                    alpha, beta, gamma, min_weight = 0.2, 0.5, 0.5, 0.05
               
                
                self.ml_core.update_cluster_weights(
                    cluster_id, 
                    'verified',
                    true_label=true_digit,
                    alpha=alpha,
                    beta=beta,
                    gamma=gamma,
                    min_weight=min_weight
                )
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤–µ—Å–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_id}")
            elif cluster_id == -1:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤: cluster_id = -1")
            
            # ‚≠ê‚≠ê –û–ë–ù–û–í–õ–Ø–ï–ú –ë–ê–ó–£ –î–ê–ù–ù–´–• ‚≠ê‚≠ê
            cursor = self.db.conn.cursor()
            cursor.execute('''
                UPDATE samples 
                SET verified_label = ?, user_feedback = 'verified'
                WHERE sample_id = ?
            ''', (true_digit, sample_id))
            self.db.conn.commit()
            
            print(f"‚úÖ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞: sample_id {sample_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            self.status_label.config(
                text=f"‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: —Ü–∏—Ñ—Ä–∞ {true_digit} (–±—ã–ª–æ: {predicted_digit})", 
                fg="green"
            )
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
            for btn in self.digit_buttons:
                btn.config(state="disabled", bg="#d0d0d0")
            
            # ‚≠ê‚≠ê –°–û–•–†–ê–ù–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ü–û–°–õ–ï –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò
            self.db.save_statistics_snapshot()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
            self.frame.after(1500, self.show_next_sample)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            self.status_label.config(text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", fg="red")

    def refresh_verification_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        self.load_pending_samples()
        self.show_next_sample()

    def debug_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print("\n=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
        print(f"–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞: {self.ml_core and self.ml_core.is_trained}")
        print(f"–ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(self.ml_core.clusters) if self.ml_core else 0}")
        print(f"–ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(self.pending_samples)}")
        print(f"–¢–µ–∫—É—â–∏–π sample: {self.current_sample['sample_id'] if self.current_sample else 'None'}")
        print("============================\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.status_label.config(text="üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏", fg="blue")